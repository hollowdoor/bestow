0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/spirit/.npm/3a52ce78-.lock
11 verbose tar pack [ '/home/spirit/.npm/divvy/0.0.2/package.tgz', '.' ]
12 verbose tarball /home/spirit/.npm/divvy/0.0.2/package.tgz
13 verbose folder .
14 info prepublish divvy@0.0.2
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /home/spirit/.npm/1f1177db-tar.lock
17 silly lockFile 58d0f743-irit-npm-divvy-0-0-2-package-tgz tar:///home/spirit/.npm/divvy/0.0.2/package.tgz
18 verbose lock tar:///home/spirit/.npm/divvy/0.0.2/package.tgz /home/spirit/.npm/58d0f743-irit-npm-divvy-0-0-2-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 58d0f743-irit-npm-divvy-0-0-2-package-tgz tar:///home/spirit/.npm/divvy/0.0.2/package.tgz
22 silly lockFile 58d0f743-irit-npm-divvy-0-0-2-package-tgz tar:///home/spirit/.npm/divvy/0.0.2/package.tgz
23 silly lockFile f10c1b16-e-spirit-npm-divvy-0-0-2-package /home/spirit/.npm/divvy/0.0.2/package
24 verbose lock /home/spirit/.npm/divvy/0.0.2/package /home/spirit/.npm/f10c1b16-e-spirit-npm-divvy-0-0-2-package.lock
25 silly lockFile f10c1b16-e-spirit-npm-divvy-0-0-2-package /home/spirit/.npm/divvy/0.0.2/package
26 silly lockFile f10c1b16-e-spirit-npm-divvy-0-0-2-package /home/spirit/.npm/divvy/0.0.2/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'divvy',
29 silly publish   author: { name: 'Quentin Engles' },
29 silly publish   description: 'Makes modules available to the browser.',
29 silly publish   version: '0.0.2',
29 silly publish   dependencies: { 'node-mime': '1.x' },
29 silly publish   readme: '\n# Divvy\n## Send modules to the browser as code.\n\n**This project is mostly for my personal use. If someone decides that they want to use this module it is publicly available. You can use it at your own risk. For now you should consider this module experimental, and it\'s interface may change in the future.**\n\n**Being that Divvy serves a purpose shared by tools like Browserfiy it will work only in certain situations, and may not work for your use case. Divvy is not meant to replace other tools. You should use what fits your use case, what works, or what you like to use. Divvy is just another option.**\n\n## Explanation\n\nI\'ve grappled with the idea of using scripts both server side, and client side. There are some basic things one can do.\n\n* Have two files.\n  1. One for the client.\n  2. One for the server.\n* Add to exports in node, or window in the browser.\n  1. Use a check to see if node is the environment.\n  2. Check if the browser is the environment.\n* Use two totally different scripts for the same purpose in both environments.\n* Use a tool like browserify.\n* Don\'t use Javascript in the server.\n* Don\'t use Javascript in the browser.\n\nSome of the above are non-solutions. Others are solutions that are used frequently enough to almost be standard/best practices. I\'ll let you decide which is which.\n\nDivvy is a module that fulfills that need for reducing repetition for what seems common methods used to accomplish browser, or server compatibilty. It brings it\'s interface to the module, and application level to accompish this.\n\n## A Warning\n\nNode has it\'s special code. This special code relies on compiled C++ to accomplish what javascript can\'t do. If a module relies on those C++ codes it will not work with Divvy. You should see undefined errors for those modules that do use C++. In some cases you may be able to replace those modules with a paritally compatible browser implementaion.\n\nNode has a lot of modules that can work in the browser already. The purpose of Divvy isn\'t to support those modules. Maybe in the future there can be a flag that a developer can set to allow Divvy support, or some other method can be used to make modules compatible.\n\nThese problems can be solved in one\'s own modules using ajax, or sockets, but there\'s no guarantee that any publicly available modules will try those solutions, or even be using Divvy.\n\nFor now Divvy can be used to load scripts that are modules using Divvy methods. The documentation explains how this can be accompished for a module.\n\n\n\n## Making a script ready for Divvy\n\nYou can just use the Divvy methods to make a script work browser side, but there are some things you can do to make a script work better. Here are those things.\n\nWrap your whole script in a self invoking function that looks like this.\n\n```\n(function(_global){\n"use strict";\n/*My code here*/\n}(GLOBAL /*node\'s global*/ || window));\n```\n\nUse `"use strict";` in your self invoking function if you like what it provides. I suggest using it because it\'s helpful in many situations.\n\n**Handling exports properly.**\n\nYou\'re going to want to export, and send your code to the browser so you want to do this. **Divvy does nothing to help your objects be exposed to the environment so you have to do this yourself. Divvy is for making modules static.**\n\n```\n(function(_global){\n"use strict";\nif(typeof module !== \'undefined\' && module.exports){\n    var divvy = require(\'divvy\');\n}\n\nvar MyObject = {};\n/*My code here*/\n//Check if we\'re in node.\nif(divvy.running === \'node\'){\n    module.exports = MyObject;\n}else{\n    //Attache my object to the browser instead.\n    window.MyObject = MyObject\n}\n}(GLOBAL /*node\'s global*/ || window));\n```\n\n`divvy.running` is redundant because of the first module check, and you\'d have to send divvy to the browser to use it so you can just use your own check.\n\n```\n(function(_global, usingNode){\n"use strict";\nif(usingNode){\n    var divvy = require(\'divvy\');\n}\n\nvar MyObject = {};\n/*My code here*/\n//Check if we\'re in node.\nif(usingNode){\n    module.exports = MyObject;\n}else{\n    //Attache my object to the browser instead.\n    window.MyObject = MyObject\n}\n}(GLOBAL /*node\'s global*/ || window, (typeof module !== \'undefined\' && module.exports));\n```\n\n## API Documentation\n\n### divvy.createSender\n\n`divvy.createSender(name[string], dirname[__dirname|string], options[{}]);`\n\ndivvy.createSender produces a function that can be used with the request, and response variables\ncreated by a node server.\n\n###Creating a sender\n\n```\nif(usingNode){\n    var divvy = require(\'divvy\');\n}\n\nvar myModule = {};\n\nif(usingNode){\n    //A new sender is created.\n    myModule.send = divvy.createSender(\'mymodule.js\', __dirname);\n    module.exports = myModule;\n}\n```\n\n###Using the sender\n\n```\nvar http = require(\'http\'),\n    mymodule = require(\'mymodule.js\');\n\n\nvar server = http.createServer(function(req, res){\n    \n    //Try to send the module static.\n    var testing = mymodule.send(req, res);\n    \n    if(!testing.success){\n        //do something else\n    }\n});\n\nserver.listen(8080);\n```\n\nIn your html file.\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<script src="mymodule.js"></script>\n</head>\n<body>\n<script>\n//You can use your module script methods, and properties on the client side now.\n</script>\n</body>\n</html>\n```\n\n### divvy.createMiddleWare\n\n`divvy.createMiddleware(name[string], dirname[__dirname|string], options[{}])`\n\ndivvy.createMiddleware has the same signature as divvy.createSender.\n\nThe only difference is the createMiddleware function creates a function that is compatible\nwith express, or any middle ware using object that sends request, response, and next variables to middleware.\n\n### Create Middleware\n\n```\nif(usingNode){\n    var divvy = require(\'divvy\');\n}\n\nvar myModule = {};\n\nif(usingNode){\n    //A new sender is created.\n    myModule.middleware = divvy.createMiddleware(\'mymodule.js\', __dirname);\n    module.exports = myModule;\n}\n```\n\n### Use Middleware\n\n```\nvar express = require(\'express\')\n    mymodule = require(\'mymodule.js\');\n\nvar app = express();\n\n//If a mymodule.js is used in the browser no other gets are used.\napp.use(mymodule.middleware());\n\napp.get(\'apath\', function(req, res){\n    //do something else\n});\n```\n\nIn your html file.\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<script src="mymodule.js"></script>\n</head>\n<body>\n<script>\n//You can use your module script methods, and properties on the client side now.\n</script>\n</body>\n</html>\n```\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'b5c12fc598a4520724b5cd01a5316a867bdbdfc0',
29 silly publish   _id: 'divvy@0.0.2',
29 silly publish   scripts: {},
29 silly publish   _shasum: 'd15413392e1ba9334b0674f7c1c5e7ef2a58affd',
29 silly publish   _from: '.' }
30 verbose request where is /divvy
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 20b30cfb9e58ade3
33 verbose url raw /divvy
34 verbose url resolving [ 'https://registry.npmjs.org/', './divvy' ]
35 verbose url resolved https://registry.npmjs.org/divvy
36 verbose request where is https://registry.npmjs.org/divvy
37 info trying registry request attempt 1 at 18:58:12
38 http PUT https://registry.npmjs.org/divvy
39 http 403 https://registry.npmjs.org/divvy
40 verbose headers { date: 'Tue, 02 Dec 2014 00:58:10 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '9951',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-iad2146-IAD',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1417481890.094192,VS0,VE162',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.0.2
42 error old={"name":"divvy","version":"0.0.2","description":"Divvies up an object's values into individual tuples","scripts":{"test":"node tests/divvy_test.js"},"dependencies":{"inflection":"1.2.5"},"devDependencies":{"test":">=0.0.5"},"readme":"# Divvy\u000a\u000a## A tiny `npm` package to split objects up conveniently.\u000a\u000aSometimes you want to take an object with keys, like this:\u000a\u000a```javascript\u000avar object = {\u000a  countries: ['United States', 'Aruba', 'Russia', 'Japan'],\u000a  people: ['Chad', 'Joe', 'Ilyna', 'Sho']\u000a};\u000a```\u000a\u000a...and split it up into separate 'items', if you will:\u000a\u000a```javascript\u000avar citizens = divvy(object);\u000aconsole.log(citizens); // Results in:\u000a/*  \u000a    [ { country: 'United States', person: 'Chad' },\u000a      { country: 'Aruba', person: 'Joe' },\u000a      { country: 'Russia', person: 'Ilyna' },\u000a      { country: 'Japan', person: 'Sho' } ]\u000a*/\u000a```","readmeFilename":"Readme.md","_id":"divvy@0.0.2","dist":{"shasum":"9c9bfe8de751bfdd57d6b1df50298dcacca59f80","tarball":"http://registry.npmjs.org/divvy/-/divvy-0.0.2.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"colinyoung","email":"me@colinyoung.com"},"maintainers":[{"name":"colinyoung","email":"me@colinyoung.com"}]}
42 error new={"name":"divvy","author":{"name":"Quentin Engles"},"description":"Makes modules available to the browser.","version":"0.0.2","dependencies":{"node-mime":"1.x"},"readme":"\u000a# Divvy\u000a## Send modules to the browser as code.\u000a\u000a**This project is mostly for my personal use. If someone decides that they want to use this module it is publicly available. You can use it at your own risk. For now you should consider this module experimental, and it's interface may change in the future.**\u000a\u000a**Being that Divvy serves a purpose shared by tools like Browserfiy it will work only in certain situations, and may not work for your use case. Divvy is not meant to replace other tools. You should use what fits your use case, what works, or what you like to use. Divvy is just another option.**\u000a\u000a## Explanation\u000a\u000aI've grappled with the idea of using scripts both server side, and client side. There are some basic things one can do.\u000a\u000a* Have two files.\u000a  1. One for the client.\u000a  2. One for the server.\u000a* Add to exports in node, or window in the browser.\u000a  1. Use a check to see if node is the environment.\u000a  2. Check if the browser is the environment.\u000a* Use two totally different scripts for the same purpose in both environments.\u000a* Use a tool like browserify.\u000a* Don't use Javascript in the server.\u000a* Don't use Javascript in the browser.\u000a\u000aSome of the above are non-solutions. Others are solutions that are used frequently enough to almost be standard/best practices. I'll let you decide which is which.\u000a\u000aDivvy is a module that fulfills that need for reducing repetition for what seems common methods used to accomplish browser, or server compatibilty. It brings it's interface to the module, and application level to accompish this.\u000a\u000a## A Warning\u000a\u000aNode has it's special code. This special code relies on compiled C++ to accomplish what javascript can't do. If a module relies on those C++ codes it will not work with Divvy. You should see undefined errors for those modules that do use C++. In some cases you may be able to replace those modules with a paritally compatible browser implementaion.\u000a\u000aNode has a lot of modules that can work in the browser already. The purpose of Divvy isn't to support those modules. Maybe in the future there can be a flag that a developer can set to allow Divvy support, or some other method can be used to make modules compatible.\u000a\u000aThese problems can be solved in one's own modules using ajax, or sockets, but there's no guarantee that any publicly available modules will try those solutions, or even be using Divvy.\u000a\u000aFor now Divvy can be used to load scripts that are modules using Divvy methods. The documentation explains how this can be accompished for a module.\u000a\u000a\u000a\u000a## Making a script ready for Divvy\u000a\u000aYou can just use the Divvy methods to make a script work browser side, but there are some things you can do to make a script work better. Here are those things.\u000a\u000aWrap your whole script in a self invoking function that looks like this.\u000a\u000a```\u000a(function(_global){\u000a\"use strict\";\u000a/*My code here*/\u000a}(GLOBAL /*node's global*/ || window));\u000a```\u000a\u000aUse `\"use strict\";` in your self invoking function if you like what it provides. I suggest using it because it's helpful in many situations.\u000a\u000a**Handling exports properly.**\u000a\u000aYou're going to want to export, and send your code to the browser so you want to do this. **Divvy does nothing to help your objects be exposed to the environment so you have to do this yourself. Divvy is for making modules static.**\u000a\u000a```\u000a(function(_global){\u000a\"use strict\";\u000aif(typeof module !== 'undefined' && module.exports){\u000a    var divvy = require('divvy');\u000a}\u000a\u000avar MyObject = {};\u000a/*My code here*/\u000a//Check if we're in node.\u000aif(divvy.running === 'node'){\u000a    module.exports = MyObject;\u000a}else{\u000a    //Attache my object to the browser instead.\u000a    window.MyObject = MyObject\u000a}\u000a}(GLOBAL /*node's global*/ || window));\u000a```\u000a\u000a`divvy.running` is redundant because of the first module check, and you'd have to send divvy to the browser to use it so you can just use your own check.\u000a\u000a```\u000a(function(_global, usingNode){\u000a\"use strict\";\u000aif(usingNode){\u000a    var divvy = require('divvy');\u000a}\u000a\u000avar MyObject = {};\u000a/*My code here*/\u000a//Check if we're in node.\u000aif(usingNode){\u000a    module.exports = MyObject;\u000a}else{\u000a    //Attache my object to the browser instead.\u000a    window.MyObject = MyObject\u000a}\u000a}(GLOBAL /*node's global*/ || window, (typeof module !== 'undefined' && module.exports));\u000a```\u000a\u000a## API Documentation\u000a\u000a### divvy.createSender\u000a\u000a`divvy.createSender(name[string], dirname[__dirname|string], options[{}]);`\u000a\u000adivvy.createSender produces a function that can be used with the request, and response variables\u000acreated by a node server.\u000a\u000a###Creating a sender\u000a\u000a```\u000aif(usingNode){\u000a    var divvy = require('divvy');\u000a}\u000a\u000avar myModule = {};\u000a\u000aif(usingNode){\u000a    //A new sender is created.\u000a    myModule.send = divvy.createSender('mymodule.js', __dirname);\u000a    module.exports = myModule;\u000a}\u000a```\u000a\u000a###Using the sender\u000a\u000a```\u000avar http = require('http'),\u000a    mymodule = require('mymodule.js');\u000a\u000a\u000avar server = http.createServer(function(req, res){\u000a    \u000a    //Try to send the module static.\u000a    var testing = mymodule.send(req, res);\u000a    \u000a    if(!testing.success){\u000a        //do something else\u000a    }\u000a});\u000a\u000aserver.listen(8080);\u000a```\u000a\u000aIn your html file.\u000a\u000a```\u000a<!DOCTYPE html>\u000a<html>\u000a<head>\u000a<script src=\"mymodule.js\"></script>\u000a</head>\u000a<body>\u000a<script>\u000a//You can use your module script methods, and properties on the client side now.\u000a</script>\u000a</body>\u000a</html>\u000a```\u000a\u000a### divvy.createMiddleWare\u000a\u000a`divvy.createMiddleware(name[string], dirname[__dirname|string], options[{}])`\u000a\u000adivvy.createMiddleware has the same signature as divvy.createSender.\u000a\u000aThe only difference is the createMiddleware function creates a function that is compatible\u000awith express, or any middle ware using object that sends request, response, and next variables to middleware.\u000a\u000a### Create Middleware\u000a\u000a```\u000aif(usingNode){\u000a    var divvy = require('divvy');\u000a}\u000a\u000avar myModule = {};\u000a\u000aif(usingNode){\u000a    //A new sender is created.\u000a    myModule.middleware = divvy.createMiddleware('mymodule.js', __dirname);\u000a    module.exports = myModule;\u000a}\u000a```\u000a\u000a### Use Middleware\u000a\u000a```\u000avar express = require('express')\u000a    mymodule = require('mymodule.js');\u000a\u000avar app = express();\u000a\u000a//If a mymodule.js is used in the browser no other gets are used.\u000aapp.use(mymodule.middleware());\u000a\u000aapp.get('apath', function(req, res){\u000a    //do something else\u000a});\u000a```\u000a\u000aIn your html file.\u000a\u000a```\u000a<!DOCTYPE html>\u000a<html>\u000a<head>\u000a<script src=\"mymodule.js\"></script>\u000a</head>\u000a<body>\u000a<script>\u000a//You can use your module script methods, and properties on the client side now.\u000a</script>\u000a</body>\u000a</html>\u000a```\u000a","readmeFilename":"README.md","gitHead":"b5c12fc598a4520724b5cd01a5316a867bdbdfc0","_id":"divvy@0.0.2","scripts":{},"_shasum":"d15413392e1ba9334b0674f7c1c5e7ef2a58affd","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"hollowdoor","email":"hollowdoor99@gmail.com"},"maintainers":[{"name":"hollowdoor","email":"hollowdoor99@gmail.com"}],"dist":{"shasum":"d15413392e1ba9334b0674f7c1c5e7ef2a58affd","tarball":"http://registry.npmjs.org/divvy/-/divvy-0.0.2.tgz"}}: divvy
42 error     at RegClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
42 error     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
42 error     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Linux 3.13.0-40-generic
45 error command "/usr/bin/node" "/usr/bin/npm" "publish"
46 error cwd /home/spirit/Projects/JSLib/divvy
47 error node -v v0.10.33
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
